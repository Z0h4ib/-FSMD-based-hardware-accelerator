;buildInfoPackage: chisel3, version: 3.3.2, scalaVersion: 2.12.11, sbtVersion: 1.3.10
circuit SystemTop : 
  module DataMemory : 
    input clock : Clock
    input reset : Reset
    output io : {flip address : UInt<16>, dataRead : UInt<32>, flip writeEnable : UInt<1>, flip dataWrite : UInt<32>, flip testerEnable : UInt<1>, flip testerAddress : UInt<16>, testerDataRead : UInt<32>, flip testerWriteEnable : UInt<1>, flip testerDataWrite : UInt<32>}
    
    cmem memory : UInt<32>[65536] @[DataMemory.scala 18:20]
    when io.testerEnable : @[DataMemory.scala 22:24]
      read mport _T = memory[io.testerAddress], clock @[DataMemory.scala 24:37]
      io.testerDataRead <= _T @[DataMemory.scala 24:23]
      io.dataRead <= UInt<32>("h00") @[DataMemory.scala 26:17]
      when io.testerWriteEnable : @[DataMemory.scala 27:32]
        write mport _T_1 = memory[io.testerAddress], clock
        _T_1 <= io.testerDataWrite
        io.testerDataRead <= io.testerDataWrite @[DataMemory.scala 30:25]
        skip @[DataMemory.scala 27:32]
      skip @[DataMemory.scala 22:24]
    else : @[DataMemory.scala 32:16]
      read mport _T_2 = memory[io.address], clock @[DataMemory.scala 34:31]
      io.dataRead <= _T_2 @[DataMemory.scala 34:17]
      io.testerDataRead <= UInt<32>("h00") @[DataMemory.scala 36:23]
      when io.writeEnable : @[DataMemory.scala 37:26]
        write mport _T_3 = memory[io.address], clock
        _T_3 <= io.dataWrite
        io.dataRead <= io.dataWrite @[DataMemory.scala 40:19]
        skip @[DataMemory.scala 37:26]
      skip @[DataMemory.scala 32:16]
    
  module Accelerator : 
    input clock : Clock
    input reset : Reset
    output io : {flip start : UInt<1>, done : UInt<1>, address : UInt<16>, flip dataRead : UInt<32>, writeEnable : UInt<1>, dataWrite : UInt<32>}
    
    reg state : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[Accelerator.scala 17:22]
    reg x : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[Accelerator.scala 20:18]
    reg y : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[Accelerator.scala 21:18]
    reg inputPixel : UInt<32>, clock @[Accelerator.scala 22:23]
    reg outputPixel : UInt<32>, clock @[Accelerator.scala 23:24]
    io.address <= UInt<1>("h00") @[Accelerator.scala 26:14]
    io.dataWrite <= UInt<1>("h00") @[Accelerator.scala 27:16]
    io.writeEnable <= UInt<1>("h00") @[Accelerator.scala 28:18]
    io.done <= UInt<1>("h00") @[Accelerator.scala 29:11]
    node _T = eq(UInt<3>("h00"), state) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      when io.start : @[Accelerator.scala 37:22]
        x <= UInt<1>("h00") @[Accelerator.scala 38:11]
        y <= UInt<1>("h00") @[Accelerator.scala 39:11]
        state <= UInt<3>("h01") @[Accelerator.scala 40:15]
        skip @[Accelerator.scala 37:22]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_1 = eq(UInt<3>("h01"), state) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 39:67]
        node _T_2 = mul(y, UInt<5>("h014")) @[Accelerator.scala 32:40]
        node _T_3 = add(_T_2, x) @[Accelerator.scala 32:47]
        node _T_4 = tail(_T_3, 1) @[Accelerator.scala 32:47]
        io.address <= _T_4 @[Accelerator.scala 45:18]
        inputPixel <= io.dataRead @[Accelerator.scala 46:18]
        state <= UInt<3>("h02") @[Accelerator.scala 47:13]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_5 = eq(UInt<3>("h02"), state) @[Conditional.scala 37:30]
        when _T_5 : @[Conditional.scala 39:67]
          node _T_6 = eq(x, UInt<1>("h00")) @[Accelerator.scala 51:14]
          node _T_7 = eq(y, UInt<1>("h00")) @[Accelerator.scala 51:27]
          node _T_8 = or(_T_6, _T_7) @[Accelerator.scala 51:22]
          node _T_9 = eq(x, UInt<5>("h013")) @[Accelerator.scala 51:40]
          node _T_10 = or(_T_8, _T_9) @[Accelerator.scala 51:35]
          node _T_11 = eq(y, UInt<5>("h013")) @[Accelerator.scala 51:54]
          node _T_12 = or(_T_10, _T_11) @[Accelerator.scala 51:49]
          when _T_12 : @[Accelerator.scala 51:64]
            outputPixel <= UInt<1>("h00") @[Accelerator.scala 53:21]
            skip @[Accelerator.scala 51:64]
          else : @[Accelerator.scala 54:19]
            node _T_13 = eq(inputPixel, UInt<8>("h0ff")) @[Accelerator.scala 62:25]
            node _T_14 = eq(io.dataRead, UInt<1>("h00")) @[Accelerator.scala 62:43]
            node _T_15 = eq(io.dataRead, UInt<1>("h00")) @[Accelerator.scala 62:61]
            node _T_16 = or(_T_14, _T_15) @[Accelerator.scala 62:51]
            node _T_17 = eq(io.dataRead, UInt<1>("h00")) @[Accelerator.scala 62:77]
            node _T_18 = or(_T_16, _T_17) @[Accelerator.scala 62:69]
            node _T_19 = eq(io.dataRead, UInt<1>("h00")) @[Accelerator.scala 62:94]
            node _T_20 = or(_T_18, _T_19) @[Accelerator.scala 62:85]
            node _T_21 = and(_T_13, _T_20) @[Accelerator.scala 62:35]
            when _T_21 : @[Accelerator.scala 62:104]
              outputPixel <= UInt<1>("h00") @[Accelerator.scala 63:23]
              skip @[Accelerator.scala 62:104]
            else : @[Accelerator.scala 64:21]
              outputPixel <= UInt<8>("h0ff") @[Accelerator.scala 65:23]
              skip @[Accelerator.scala 64:21]
            skip @[Accelerator.scala 54:19]
          state <= UInt<3>("h03") @[Accelerator.scala 68:13]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_22 = eq(UInt<3>("h03"), state) @[Conditional.scala 37:30]
          when _T_22 : @[Conditional.scala 39:67]
            node _T_23 = mul(y, UInt<5>("h014")) @[Accelerator.scala 32:40]
            node _T_24 = add(_T_23, x) @[Accelerator.scala 32:47]
            node _T_25 = tail(_T_24, 1) @[Accelerator.scala 32:47]
            node _T_26 = add(_T_25, UInt<9>("h0190")) @[Accelerator.scala 72:32]
            node _T_27 = tail(_T_26, 1) @[Accelerator.scala 72:32]
            io.address <= _T_27 @[Accelerator.scala 72:18]
            io.dataWrite <= outputPixel @[Accelerator.scala 73:20]
            io.writeEnable <= UInt<1>("h01") @[Accelerator.scala 74:22]
            state <= UInt<3>("h04") @[Accelerator.scala 75:13]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_28 = eq(UInt<3>("h04"), state) @[Conditional.scala 37:30]
            when _T_28 : @[Conditional.scala 39:67]
              node _T_29 = eq(x, UInt<5>("h013")) @[Accelerator.scala 80:14]
              when _T_29 : @[Accelerator.scala 80:24]
                x <= UInt<1>("h00") @[Accelerator.scala 81:11]
                node _T_30 = add(y, UInt<1>("h01")) @[Accelerator.scala 82:16]
                node _T_31 = tail(_T_30, 1) @[Accelerator.scala 82:16]
                y <= _T_31 @[Accelerator.scala 82:11]
                skip @[Accelerator.scala 80:24]
              else : @[Accelerator.scala 83:19]
                node _T_32 = add(x, UInt<1>("h01")) @[Accelerator.scala 84:16]
                node _T_33 = tail(_T_32, 1) @[Accelerator.scala 84:16]
                x <= _T_33 @[Accelerator.scala 84:11]
                skip @[Accelerator.scala 83:19]
              node _T_34 = eq(y, UInt<5>("h013")) @[Accelerator.scala 87:14]
              node _T_35 = eq(x, UInt<5>("h013")) @[Accelerator.scala 87:28]
              node _T_36 = and(_T_34, _T_35) @[Accelerator.scala 87:23]
              when _T_36 : @[Accelerator.scala 87:38]
                state <= UInt<3>("h05") @[Accelerator.scala 88:15]
                skip @[Accelerator.scala 87:38]
              else : @[Accelerator.scala 89:19]
                state <= UInt<3>("h01") @[Accelerator.scala 90:15]
                skip @[Accelerator.scala 89:19]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_37 = eq(UInt<3>("h05"), state) @[Conditional.scala 37:30]
              when _T_37 : @[Conditional.scala 39:67]
                io.done <= UInt<1>("h01") @[Accelerator.scala 95:15]
                node _T_38 = eq(io.start, UInt<1>("h00")) @[Accelerator.scala 96:12]
                when _T_38 : @[Accelerator.scala 96:23]
                  state <= UInt<3>("h00") @[Accelerator.scala 97:15]
                  skip @[Accelerator.scala 96:23]
                skip @[Conditional.scala 39:67]
    
  module SystemTop : 
    input clock : Clock
    input reset : UInt<1>
    output io : {done : UInt<1>, flip start : UInt<1>, flip testerDataMemEnable : UInt<1>, flip testerDataMemAddress : UInt<16>, testerDataMemDataRead : UInt<32>, flip testerDataMemWriteEnable : UInt<1>, flip testerDataMemDataWrite : UInt<32>}
    
    inst dataMemory of DataMemory @[SystemTop.scala 18:26]
    dataMemory.clock <= clock
    dataMemory.reset <= reset
    inst accelerator of Accelerator @[SystemTop.scala 19:27]
    accelerator.clock <= clock
    accelerator.reset <= reset
    io.done <= accelerator.io.done @[SystemTop.scala 23:11]
    accelerator.io.start <= io.start @[SystemTop.scala 24:24]
    accelerator.io.dataRead <= dataMemory.io.dataRead @[SystemTop.scala 27:27]
    dataMemory.io.address <= accelerator.io.address @[SystemTop.scala 28:25]
    dataMemory.io.dataWrite <= accelerator.io.dataWrite @[SystemTop.scala 29:27]
    dataMemory.io.writeEnable <= accelerator.io.writeEnable @[SystemTop.scala 30:29]
    dataMemory.io.testerAddress <= io.testerDataMemAddress @[SystemTop.scala 33:31]
    io.testerDataMemDataRead <= dataMemory.io.testerDataRead @[SystemTop.scala 34:28]
    dataMemory.io.testerDataWrite <= io.testerDataMemDataWrite @[SystemTop.scala 35:33]
    dataMemory.io.testerEnable <= io.testerDataMemEnable @[SystemTop.scala 36:30]
    dataMemory.io.testerWriteEnable <= io.testerDataMemWriteEnable @[SystemTop.scala 37:35]
    
